@{
    ViewData["Title"] = "Video Call - Chat";
}
<script>
    document.addEventListener('DOMContentLoaded', function () {
        // Kiểm tra xem trình duyệt có hỗ trợ navigator.getUserMedia hay không
        if (navigator.mediaDevices && navigator.mediaDevices.getUserMedia) {
            // Yêu cầu quyền truy cập camera và microphone
            navigator.mediaDevices.getUserMedia({ video: true, audio: true })
                .then(function (stream) {
                    console.log('Quyền truy cập được cấp!');
                    // Nếu cần sử dụng stream, bạn có thể làm điều gì đó ở đây
                })
                .catch(function (error) {
                    console.error('Lỗi khi yêu cầu quyền truy cập:', error);
                });
        } else {
            console.error('Trình duyệt không hỗ trợ getUserMedia.');
        }
    });
</script>
<style>
    .video-grid {
        width: 100%;
        height: 100%;
        overflow: hidden;
        margin: 2px;
        display: flex;
        flex-wrap: wrap;
        justify-content: start;
        border-radius: 5px;
    }

        .video-grid video {
            width: calc(50% - 4px);
            max-width: none;
            margin: 2px;
            border-radius: 5px;
            box-shadow: 0 0 5px rgba(0, 0, 0, 0.2);
            transition: width 0.3s, height 0.3s, z-index 0.3s;
            cursor: pointer;
        }

       .video-grid video,
       .video-grid video.fullscreen {
           transition: width 0.3s, height 0.3s, z-index 0.3s;
       }

           .video-grid video.fullscreen {
               width: 100%;
               height: auto; /* Adjusted to maintain the aspect ratio */
           }


    .chat-container {
        width: 100%;
        height: 200px;
        margin: 10px;
        background-color: #f0f0f0;
        position: relative;
        overflow: hidden;
        border-radius: 5px;
    }

    media screen and (max-width: 600px) {
        .video-grid,
        .chat-container {
            width: 100%;
            height: auto;
        }

        .video-grid video {
            width: 100%;
        }
    }

    .chat-container {
        max-width: 600px;
        margin: auto;
    }

    .button-container {
        width: 100%;
        background-color: #f0f0f0;
        position: relative;
        overflow: hidden;
        border-radius: 5px;
    }
    .button-container {
        max-width: 600px;
        margin: auto;
    }
    .chat-box {
        max-height: 300px; /* Đặt chiều cao tối đa để kích thước thanh cuộn xuất hiện */
        overflow-y: auto; /* Hiển thị thanh cuộn khi nội dung vượt quá chiều cao */
        margin-bottom: 20px;
    }
    /* CSS for the chat box */
    .chat-box {
        height: 200px; /* Set a fixed height or adjust as needed */
        overflow-y: auto;
        border-radius: 5px;
    }

    .user-message {
        background-color: #d4edda;
        border: 1px solid #c3e6cb;
        border-radius: 5px;
        padding: 10px;
        margin-bottom: 10px;
    }

    .bot-message {
        background-color: #f8d7da;
        border: 1px solid #f5c6cb;
        border-radius: 5px;
        padding: 10px;
        margin-bottom: 10px;
    }

    .input-group {
        margin-top: 20px;
    }

    /* Add Bootstrap custom-select styles */
    .custom-select {
        display: block;
        width: 100%;
        padding: 0.375rem 2.25rem 0.375rem 0.75rem;
        line-height: 1.5;
        color: #495057;
        background-color: #fff;
        background-clip: padding-box;
        border: 1px solid #ced4da;
        border-radius: 0.25rem;
        transition: border-color 0.15s ease-in-out, box-shadow 0.15s ease-in-out;
    }

        .custom-select:focus {
            border-color: #80bdff;
            outline: 0;
            box-shadow: 0 0 0 0.2rem rgba(0, 123, 255, 0.25);
        }

        .custom-select::before {
            position: absolute;
            top: 50%;
            right: 0.75rem;
            transform: translateY(-50%);
            width: 0;
            height: 0;
            content: '';
            border-top: 0.3em solid;
            border-right: 0.3em solid transparent;
            border-bottom: 0.3em solid;
        }

        .custom-select[disabled] {
            background-color: #e9ecef;
            color: #495057;
            pointer-events: none;
            cursor: not-allowed;
        }

            .custom-select[disabled]::before {
                display: none;
            }

</style>
<div class="text-center">
    
    <div class="video-grid" video-gird>

    </div>
        <div class="row">
        <div class="col-md-2">

        </div>
        <div class="col-md-8" style="border-radius: 50px; background-color: #f0f0f0;">
            <button class="btn btn-outline-info m-2" id="toggleVideoButton" onclick="toggleVideo()">
                <i id="videoIcon" class="bi bi-camera-video-fill"></i> 
            </button>

            <button class="btn btn-outline-info m-2" id="toggleAudioButton" onclick="toggleAudio()">
                <i id="audioIcon" class="bi bi-mic"></i>
            </button>
            <button class="btn btn-outline-info m-2" id="shareScreenButton" onclick="shareScreen()">
                <i id="shareScreenIcon" class="bi bi-display"></i>
            </button>
            <!-- 
                <a class="btn btn-outline-info m-2" >
                <i class="bi bi-person-fill-add"></i> Kết bạn
                </a>

            -->
            <a class="btn btn-outline-danger m-2" onclick="leaveRoom(ROOMID)">
                <i class="bi bi-telephone-x"></i>
            </a>
         </div>
        <div class="col-md-2">
        </div>
    </div>
<!-- HTML -->
<div class="text-center text-info">
    <h4 class="text-info">Bạn là người hướng nội ? Vậy thì chat nhé...</h4>
</div>
<div class="container  chat-container">
    
    <div class="chat-box">
        <!-- Chat messages go here -->
    </div>
</div>
<div class="container button-container">

    <div class="row">
        <div class="input-group">
            <div class="input-group-prepend">
                <select id="emojiSelect" class="custom-select">
                    <!-- Emoji options will be added dynamically here -->
                </select>
            </div>
            <input id="messageInput" class="form-control" placeholder="Nhập tin nhắn ở đây..." type="text" />
            <div class="input-group-append">
                    <button id="sendButton" class="btn btn-outline-success" type="button"><i class="bi bi-send-fill"></i></button>
                    <button class="btn btn-outline-info" id="NotificationButton" onclick="toggleNotifi()">
                        <i class="bi bi-bell"></i>
                    </button>
                </div>
        </div>
    </div>
 </div>


<!-- JavaScript -->
<script>
    document.addEventListener("DOMContentLoaded", function () {
        var emojiSelect = document.getElementById("emojiSelect");

        // List of emojis
        var emojis = ["❤️", "👍", "😊", "😂", "🔥", "🎉", "🚀", "🌈", "🍕", "🍦", "🎈", "🎁", "🍔", "🍟", "🌍", "🚗", "🏆", "⌛", "💡", "📱", "🎵", "🏖️", "⚽", "🎮", "📚", "🍎", "🍭", "☕", "🍻", "🌺", "🌙", "💤", "💪", "💔", "👋", "🙌", "🍇", "🌟", "👑", "💎", "🎀", "🚢", "🚁", "🚲", "🍓", "🍒", "🍍", "🍌", "🍊", "🍋", "🍉", "🍈", "🍏", "🥑", "🍆", "🍅", "🌽", "🍠", "🍤", "🍥", "🍣", "🍢", "🍡", "🍦", "🍧", "🍨", "🍩", "🍪", "🎂", "🍰", "🧁", "🍫", "🍬", "🍭", "🍮", "🍯", "🍩", "☕", "🍵", "🍶", "🍷", "🍸", "🍹", "🍺", "🍻", "🥂", "🥃", "🥤"];

        // Shuffle emojis randomly
        emojis = shuffleArray(emojis);

            emojis.forEach(function (emoji) {
                var option = document.createElement("option");
                option.value = emoji;
                option.text = emoji;
                emojiSelect.add(option);
            });
            // Add click event to insert selected emoji into the text input
            emojiSelect.addEventListener("change", function () {
                var selectedEmoji = emojiSelect.value;
                messageInput.value += selectedEmoji;
            });
    });

    // Shuffle array function
    function shuffleArray(array) {
        for (var i = array.length - 1; i > 0; i--) {
            var j = Math.floor(Math.random() * (i + 1));
            [array[i], array[j]] = [array[j], array[i]];
        }
        return array;
    }
</script>
</div>

<script src="~/js/signalr/dist/browser/signalr.min.js"></script>
<script src="~/js/signalr/dist/browser/signalr.js"></script>
<script src="https://unpkg.com/peerjs@1.5.2/dist/peerjs.min.js"></script>

<script>
    let isScreenSharing = false;
    // Variable to track the state of video and audio
    let isLocalAudioEnabled = true;
    let isLocalVideoEnabled = true;
    // Mã phòng
    const ROOMID = '@ViewData["RoomId"]'
    // user id
    let UserId = null;
    let localstream = null;
    const Peers = {};
    // Kết nối tới signalR
    var connection = new signalR.HubConnectionBuilder()
    .withUrl("/videocall")
    .build();    

    // tạo mới 1 đối tượng Peer
    var peer = new Peer();
    peer.on('open', id => {
        UserId = id;
        const startSignalR = async () => {
            await connection.start();
            await connection.invoke("JoinRoom", ROOMID, UserId);
        }
        startSignalR();
    })

    const videocontainer = document.querySelector('[video-gird]');
    const myVideo = document.createElement('video');
    // Add event listener for double-click on userVideo
    myVideo.addEventListener('dblclick', function () {
        // Toggle 'fullscreen' class for myVideo
        if (myVideo.classList.contains('fullscreen')) {
            myVideo.classList.remove('fullscreen');
        } else {
            myVideo.classList.add('fullscreen');
        }
    });
    navigator.mediaDevices.getUserMedia({
        audio: true,
        video: true
    }).then(stream => {
        // nếu cho phép thì hiện video và tiếng
        addVideoStream(myVideo, stream)       
        localstream = stream
        toggleAudio();
        toggleVideo();
    })
    // Kih user join vao phòng
    connection.on('user-connected', id => {
      
        if (UserId === id) {
            toastr.info('Bạn đã được ghép vào phòng', 'Thông báo', {
                closeButton: true,
                progressBar: true,
                positionClass: 'toast-top-right',
                timeOut: 3000 // Thời gian hiển thị toast (ms)
            });
            return;
        }
        toastr.info('Người ấy đã vào phòng', 'Thông báo', {
            closeButton: true,
            progressBar: true,
            positionClass: 'toast-top-right',
            timeOut: 3000 // Thời gian hiển thị toast (ms)
        });
        connectNewUser(id, localstream)
    })

    // Khi user thoát khỏi phòng
    connection.on('user-disconneted', id => {

        toastr.info('Đối phương đã rời', 'Thông báo', {
            closeButton: true,
            progressBar: true,
            positionClass: 'toast-top-right',
            timeOut: 3000 // Thời gian hiển thị toast (ms)
        });
        // Đợi 2 giây rồi chuyển về home/matchfound
        setTimeout(function () {
            window.location.href = '/home/matchfound';
        }, 2000);

        if (Peers[id]) {
            Peers[id].close();
            delete Peers[id];
        }
        console.log(Peers);
    });
    connection.on("cannot-join-room", function (connectionId, message) {
        // Check if the received ConnectionId matches the current client's ConnectionId
        if (connectionId === connection.connectionId) {
            console.log(connectionId);
            console.log(connection.connectionId);
            // Handle the message for the current client
            alert(message); // You can replace this with your own UI logic
        }
    });

    const addVideoStream = (video, stream) => {
        video.srcObject = stream;
        video.addEventListener('loadedmetadata', () => {
            video.play()
        })
        videocontainer.appendChild(video)
    }

    
    // Update video button UI
    const updateVideoButtonUI = () => {
        const videoIcon = document.getElementById('videoIcon');
        videoIcon.className = isLocalVideoEnabled ?  'bi bi-camera-video-fill': 'bi bi-camera-video-off-fill';
    };

    // Update audio button UI
    const updateAudioButtonUI = () => {
        const audioIcon = document.getElementById('audioIcon');
        audioIcon.className = isLocalAudioEnabled ?  'bi bi-mic': 'bi bi-mic-mute';
    };



    // Toggle video function
    const toggleVideo = () => {


        const videoTracks = localstream.getVideoTracks();

        if (videoTracks.length > 0) {
            videoTracks[0].enabled = !videoTracks[0].enabled;
            isLocalVideoEnabled = videoTracks[0].enabled;
            console.log(isLocalVideoEnabled);
            updateVideoButtonUI();
        } else {
            console.error('No video tracks found in the local stream.');
        }
    };

    // Toggle audio function
    const toggleAudio =  () => {

        const audioTracks = localstream.getAudioTracks();

        if (audioTracks.length > 0) {
            audioTracks[0].enabled = !audioTracks[0].enabled;
            isLocalAudioEnabled = audioTracks[0].enabled;
            console.log(isLocalAudioEnabled);
            updateAudioButtonUI();
        } else {
            console.error('No audio tracks found in the local stream.');
        }
    };
 
    connection.on('user-toggled-video', (userId, isEnabled) => {
        if (Peers[userId]) {
            Peers[userId].isVideoEnabled = isEnabled;
        }
    });

    connection.on("user-leaveroom", function (connectionId) {
        if (connectionId === connection.connectionId) {
            window.location.href = '/home/matchfound';
        } else {
            toastr.info('Đối phương đã rời', 'Thông báo', {
                closeButton: true,
                progressBar: true,
                positionClass: 'toast-top-right',
                timeOut: 3000 // Thời gian hiển thị toast (ms)
            });
            // Đợi 2 giây rồi chuyển về home/matchfound
            setTimeout(function () {
                window.location.href = '/home/matchfound';
            }, 2000);
        }
    });



    const connectNewUser = (userId, localStream) => {
        const userVideo = document.createElement('video');
        // Add event listener for double-click on userVideo
        userVideo.addEventListener('dblclick', function () {
            // Toggle 'fullscreen' class for myVideo
            if (userVideo.classList.contains('fullscreen')) {
                userVideo.classList.remove('fullscreen');
            } else {
                userVideo.classList.add('fullscreen');
            }
        });
        const call = peer.call(userId, localstream);

        call.isVideoEnabled = true; // Mặc định là bật video

        call.on('stream', userVideostream => {
            addVideoStream(userVideo, userVideostream);
            if (!call.isVideoEnabled) {
                userVideo.style.display = 'none';
            }
        });
        
        call.on('close', () => {
            userVideo.remove();
        });

        Peers[userId] = call;
    };

    peer.on('call', call => {
        call.answer(localstream);

        call.isVideoEnabled = true; // Mặc định là bật video

        const userVideo = document.createElement('video');
        userVideo.addEventListener('dblclick', function () {
            // Toggle 'fullscreen' class for myVideo
            if (userVideo.classList.contains('fullscreen')) {
                userVideo.classList.remove('fullscreen');
            } else {
                userVideo.classList.add('fullscreen');
            }
        });
        call.on('stream', uservieostream => {
            addVideoStream(userVideo, uservieostream);
            if (!call.isVideoEnabled) {
                userVideo.style.display = 'none';
            }
        });

        Peers[call.peer] = call;
    });

    connection.on('user-toggled-video', (userId, isEnabled) => {
        if (userId === UserId) {
            isLocalVideoEnabled = isEnabled;
            myVideo.style.display = isEnabled ? 'block' : 'none';
        }
    });

    $(document).ready(function () {

        $("#sendButton").click(function () {
            var message = $("#messageInput").val();
            if(message != ""){
                // Call the server-side method to send a message
                connection.invoke("SendMessageToRoom", ROOMID, UserId, message).catch(function (err) {
                    return console.error(err.toString());
                });
            }

            // Clear the message input
            $("#messageInput").val("");
        });

        // Handle the incoming message from the server
        connection.on("ReceiveMessage", function (user, message) {
            var chatBox = $(".chat-box"); // Assuming ".chat-box" is the container for chat messages

            var messageElement = $("<div></div>").addClass("message");

            if (user === UserId) {
                messageElement.addClass("user-message");
                messageElement.html("<strong>Bạn: </strong> " + message);
            } else {
                messageElement.addClass("bot-message");
                messageElement.html("<strong>Người ấy: </strong> " + message);
                playNotificationSound();
            }
            chatBox.append(messageElement);
        });
    });

    async function leaveRoom(roomid) {
        if (connection.state !== "Connected") {
            // Nếu kết nối chưa được thiết lập, hãy thiết lập nó trước khi gọi hàm
            await startConnection();
        }

        await connection.invoke("LeaveRoom", roomid).then(function () {
        }).catch(function (err) {
            console.error(err.toString());
        }).finally(function () {
        });
    }

    // Function to initiate screen sharing
    const shareScreen = async () => {
        try {
            if (isScreenSharing === false) {
                // Request permission to share the screen
                const screenStream = await navigator.mediaDevices.getDisplayMedia({
                    video: true,
                    audio: {
                        echoCancellation: true,
                        noiseSuppression: true
                    }
                });
                // Iterate through all connected peers and replace their video track
                for (const peerId in Peers) {
                    const peerConnection = Peers[peerId].peerConnection;
                    const sender = peerConnection.getSenders().find((s) => s.track.kind === 'video');
                    sender.replaceTrack(screenStream.getVideoTracks()[0]);
                }
                if (connection.state !== "Connected") {
                    // Nếu kết nối chưa được thiết lập, hãy thiết lập nó trước khi gọi hàm
                    await startConnection();
                }
                playNotificationSound();

                // Invoke the "ShareScreen" method with your signaling mechanism (connection.invoke)
                await connection.invoke("ShareScreen", ROOMID, true);
                // Handle the onended event for screen sharing
                screenStream.getVideoTracks()[0].onended = async function () {
                    await stopShare();
                };

                // Update button appearance
                updateButtonAppearance(true);
                isScreenSharing = true;
            } else {
                // Handle the onended event for screen sharing
                await stopShare();
                // Update button appearance
                updateButtonAppearance(false);
                isScreenSharing = false;
            }
            console.log(isScreenSharing);

            // Toggle the screen sharing state
        } catch (error) {
            // Handle errors
            toastr.info('Error sharing screen:' + error, 'Thông báo', {
                closeButton: true,
                progressBar: true,
                positionClass: 'toast-top-right',
                timeOut: 3000
            });
        }

        // dừng chia sẽ màn hình
        async function stopShare() {
            let videotrack = localstream.getVideoTracks()[0];
            // Iterate through all connected peers and replace their video track
            for (const peerId in Peers) {
                const peerConnection = Peers[peerId].peerConnection;
                const sender = peerConnection.getSenders().find((s) => s.track.kind === videotrack.kind);
                sender.replaceTrack(videotrack);
            }
            if (connection.state !== "Connected") {
                // Nếu kết nối chưa được thiết lập, hãy thiết lập nó trước khi gọi hàm
                await startConnection();
            }
            playNotificationSound();

            await connection.invoke("ShareScreen", ROOMID, false);

            // Update button appearance
            updateButtonAppearance(false);
            // Toggle the screen sharing state
            isScreenSharing = false;
        }
    };

    connection.on("user-sharecreen", function (connectionid, isShare) {
        // Check if the received ConnectionId matches the current client's ConnectionId
        if (connectionid === connection.connectionId) {
            if (isShare) {
                // Redirect to the desired page
                toastr.info('Bạn đã chia sẽ màn hình', 'Thông báo', {
                    closeButton: true,
                    progressBar: true,
                    positionClass: 'toast-top-right',
                    timeOut: 3000 // Thời gian hiển thị toast (ms)
                });
            } else {
                // Redirect to the desired page
                toastr.info('Bạn đã tắt chia sẽ màn hình', 'Thông báo', {
                    closeButton: true,
                    progressBar: true,
                    positionClass: 'toast-top-right',
                    timeOut: 3000 // Thời gian hiển thị toast (ms)
                });
            }
            return;
        }
        if (isShare) {
            // Do something else if needed
            toastr.info('Ai đó đang chia sẽ màn hình', 'Thông báo', {
                closeButton: true,
                progressBar: true,
                positionClass: 'toast-top-right',
                timeOut: 3000 // Thời gian hiển thị toast (ms)
            });
        }
        else {
            // Do something else if needed
            toastr.info('Ai đó đã tắt chia sẽ màn hình', 'Thông báo', {
                closeButton: true,
                progressBar: true,
                positionClass: 'toast-top-right',
                timeOut: 3000 // Thời gian hiển thị toast (ms)
            });
        }
    });


    // Function to update button appearance based on the screen sharing state
    function updateButtonAppearance(isSharing) {
        const shareScreenButton = document.getElementById('shareScreenButton');
        const shareScreenIcon = document.getElementById('shareScreenIcon');

        if (isSharing) {
            // Change button color to red
            shareScreenButton.classList.add('btn-danger');
            shareScreenButton.classList.remove('btn-outline-info');

            // Change icon to a red icon (you need to provide the class for a red icon)
            shareScreenIcon.classList.add('red-icon-class');
            shareScreenIcon.classList.remove('bi-display');
        } else {
            // Change button color back to the original
            shareScreenButton.classList.remove('btn-danger');
            shareScreenButton.classList.add('btn-outline-info');

            // Change icon back to the original
            shareScreenIcon.classList.remove('red-icon-class');
            shareScreenIcon.classList.add('bi-display');
        }
    }

</script>
<script src="http://ajax.microsoft.com/ajax/jquery/jquery-1.10.2.js" type="text/javascript"></script>
